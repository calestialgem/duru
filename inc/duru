// Collection of tools for the Duru Programming Language.

#ifndef DURU
#define DURU 1

#include <array>
#include <cstddef>

// =============================================================================
// ------------------------ *** C O N T A I N E R S *** ------------------------
// =============================================================================

namespace duru {
  // Holds a [Tuple] member at a particular index.
  //
  // Used for keeping tract of which index holds which member in a [Tuple].
  template<std::size_t index, typename Member>
  struct TupleMemberHolder {
    Member member;
  };

  // [Tuple] and sub-[Tuple]s that hold the index of the first index.
  //
  // Used for pattern matching on the members. Has a base case and a recursive
  // case.
  template<std::size_t index, typename... Members>
  struct IndexedTuple;

  // Recursive case for the [IndexedTuple].
  template<
      std::size_t index,
      typename FirstMember,
      typename... RemainingMembers>
  struct IndexedTuple<index, FirstMember, RemainingMembers...>
      : TupleMemberHolder<index, FirstMember>,
        IndexedTuple<index + 1, RemainingMembers...> {};

  // Base case for the [IndexedTuple].
  template<std::size_t index>
  struct IndexedTuple<index> {};

  // Container of product of an ordered collection of types.
  template<typename... Members>
  struct Tuple : IndexedTuple<0, Members...> {};

  // Type with only one instance.
  //
  // Implemented as an empty [Tuple].
  struct Unit : Tuple<> {};

  // Returns the member of a [Tuple] at a compile-time known index.
  template<std::size_t index, typename Member>
  [[nodiscard]] constexpr Member& get(
      TupleMemberHolder<index, Member>& tuple) noexcept {
    return tuple.member;
  }

  // Returns the maximum of a single number, which is itself.
  //
  // Used for pattern matching on a template pack of numbers.
  [[nodiscard]] constexpr auto max(auto number) noexcept { return number; }

  // Returns the maximum of the given numbers using `operator<`.
  [[nodiscard]] constexpr auto max(
      auto firstNumber, auto... remainingNumbers) noexcept {
    auto maxOfRemaining = max(remainingNumbers...);
    if (firstNumber < maxOfRemaining) { return maxOfRemaining; }
    return firstNumber;
  }

  // Contains one type out of all alternative ones; a tagged union.
  template<typename... Alternatives>
  struct Variant {
    // Data of the currently active alternative of the variant.
    alignas(max(alignof(Alternatives)...))
        std::array<char, max(sizeof(Alternatives)...)> data;

    // Identifier of the currently active alternative.
    std::size_t tag;
  };

  // Contains a value or error.
  //
  // Useful for holding the outcome of a subroutine.
  template<typename Value, typename Error>
  struct [[nodiscard]] Result : Variant<Value, Error> {};

  // Ordered collection of zero or more elements.
  template<typename Element>
  struct List {
    // Dynamic array holding [capacity] amount of elements. First [length]
    // amount of elements are initialized. Can be null iff [capacity] is `0`.
    Element* elements;

    // Number of elements the [List] can hold.
    std::size_t capacity;

    // Number of elements in the [List].
    std::size_t length;
  };
}

// =============================================================================
// ------------------------------ *** T E X T *** ------------------------------
// =============================================================================

namespace duru {
  // Linear collection of zero or more [Character]s.
  struct String {
    // [std::byte]s that make up the [String], encoded in UTF-8.
    List<std::byte> bytes;
  };

  // Linear collection of one or more [Codepoint]s.
  struct Character {};

  // Linear collection of one or more [std::byte]s, encoded using UTF-8.
  struct Codepoint {};
}

// =============================================================================
// -------------------- *** I N I T I A L I Z A T I O N *** --------------------
// =============================================================================

namespace duru {
  // Initializes a new project in the given directory with the given name.
  //
  // Returns the error code. Fails if there is a configuration file in the given
  // directory or its parents. Additionally propagates any IO failure.
  //
  // Initialization is creating the necessary configuration to setup a project
  // in the given directory. Also, creates a simple source file for debugging
  // the setup.
  inline Result<Unit, Unit> initialize(String directory, String name) noexcept {
    return {};
  }
}

#endif // DURU
