using duru.Boolean;
using duru.Byte;
using duru.Monostate;
using duru.Natural64;
using duru.Size;
using duru.Span;
using duru.TerminatedSpan;
using duru.false;
using duru.true;

struct String(Span[Byte] bytes, Size length) {
  public const String empty = view("");

  template[Byte sentinel]
  public String view(TerminatedSpan[Byte, sentinel] viewed) {
    Size length = 0;
    for viewed.get(length) != sentinel { length++; }
    return String(viewed, length);
  }

  public Byte get(String string, Size index) {
    return string.bytes.get(index);
  }

  public Boolean compare(String left, String right) {
    if left.length != right.length { return false; }
    for Size i = 0; i < left.length; i++ {
      if left.get(i) != right.get(i) { return false; }
    }
    return true;
  }

  public Natural64 hash(String hashed) {
    const Natural64 prime_factor = 53;
    Natural64 result = 0;
    for Size i = 0; i < hashed.length; i++ {
      result *= prime_factor;
      result += hashed.get(i);
    }
    return result;
  }
}

enum Number(Natural64, Parsed, Added) {
  public struct Parsed(source String) {}

  public struct Added(Number base, Natural64 operand) {}

  public const Number zero = create(0);

  public Number create(Natural64 value) { return Number(value); }

  template[Byte sentinel]
  public Number parse(TerminatedSpan[Byte, sentinel] source) {
    return Number(Parsed(String.view(source)));
  }

  public Monostate increment(Number* number) {
    switch number {
      case Natural64* value { value++; }
      case _ { number = Added(number, 1); }
    }
  }

  public Boolean compare(Number left, Number right) {
    return left.get() == right.get();
  }

  Natural64 get(Number number) {
    switch number {
      case Natural64 value { return value; }
      case Parsed(String source) {
        Natural64 result = 0;
        for Size i = 0; i < source.length; i++ {
          result *= 10;
          result += source.get(i) - '0';
        }
        return result;
      }
      case Added operation { return operation.base.get() + operation.operand; }
    }
  }
}

entrypoint {
  Number n0 = Number.create(75846);
  Number n1 = Number.parse("75845");
  n1.increment();
  duru.exit(n0.compare(n1));
}
